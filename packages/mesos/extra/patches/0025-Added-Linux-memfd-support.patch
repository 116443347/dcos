From 2fd2d968ca577ad266d0b0aa04783c8c93bde176 Mon Sep 17 00:00:00 2001
From: Jie Yu <yujie.jay@gmail.com>
Date: Fri, 1 Feb 2019 22:23:30 -0800
Subject: [PATCH] Added Linux memfd support.

This patch adds the memfd support to allow us to copy a regular file
into a memfd.

(cherry picked from commit a591fc77c34a70e31d474542c8cbad1523abffb8)
---
 src/CMakeLists.txt  |   1 +
 src/Makefile.am     |   2 +
 src/linux/memfd.cpp | 144 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/linux/memfd.hpp |  39 ++++++++++++++
 4 files changed, 186 insertions(+)
 create mode 100644 src/linux/memfd.cpp
 create mode 100644 src/linux/memfd.hpp

diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 6532308..c4adfdf 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -243,6 +243,7 @@ set(LINUX_SRC
   linux/fs.cpp
   linux/ldcache.cpp
   linux/ldd.cpp
+  linux/memfd.cpp
   linux/ns.cpp
   linux/perf.cpp
   linux/systemd.cpp
diff --git a/src/Makefile.am b/src/Makefile.am
index 679a25b..bea5f4e 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1308,6 +1308,7 @@ MESOS_LINUX_FILES =									\
   linux/fs.cpp										\
   linux/ldcache.cpp									\
   linux/ldd.cpp										\
+  linux/memfd.cpp									\
   linux/ns.cpp										\
   linux/perf.cpp									\
   linux/systemd.cpp									\
@@ -1352,6 +1353,7 @@ MESOS_LINUX_FILES +=									\
   linux/fs.hpp										\
   linux/ldcache.hpp									\
   linux/ldd.hpp										\
+  linux/memfd.hpp									\
   linux/ns.hpp										\
   linux/perf.hpp									\
   linux/sched.hpp									\
diff --git a/src/linux/memfd.cpp b/src/linux/memfd.cpp
new file mode 100644
index 0000000..706dc0c
--- /dev/null
+++ b/src/linux/memfd.cpp
@@ -0,0 +1,144 @@
+// Licensed to the Apache Software Foundation (ASF) under one
+// or more contributor license agreements.  See the NOTICE file
+// distributed with this work for additional information
+// regarding copyright ownership.  The ASF licenses this file
+// to you under the Apache License, Version 2.0 (the
+// "License"); you may not use this file except in compliance
+// with the License.  You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include <fcntl.h>
+#include <unistd.h>
+
+#include <sys/sendfile.h>
+#include <sys/syscall.h>
+
+#include <stout/stringify.hpp>
+
+#include <stout/os/close.hpp>
+#include <stout/os/open.hpp>
+#include <stout/os/stat.hpp>
+
+using std::string;
+
+#if !defined(MFD_CLOEXEC)
+#define MFD_CLOEXEC 0x0001U
+#endif
+
+#if !defined(MFD_ALLOW_SEALING)
+#define MFD_ALLOW_SEALING 0x0002U
+#endif
+
+#if !defined(F_ADD_SEALS)
+#define F_ADD_SEALS 1033
+#endif
+
+#if !defined(F_GET_SEALS)
+#define F_GET_SEALS 1034
+#endif
+
+#if !defined(F_SEAL_SEAL)
+#define F_SEAL_SEAL   0x0001
+#endif
+
+#if !defined(F_SEAL_SHRINK)
+#define F_SEAL_SHRINK 0x0002
+#endif
+
+#if !defined(F_SEAL_GROW)
+#define F_SEAL_GROW   0x0004
+#endif
+
+#if !defined(F_SEAL_WRITE)
+#define F_SEAL_WRITE  0x0008
+#endif
+
+namespace mesos {
+namespace internal {
+namespace memfd {
+
+static Try<int_fd> create(const string& name, unsigned int flags)
+{
+#ifdef __NR_memfd_create
+  int_fd fd = ::syscall(__NR_memfd_create, name.c_str(), flags);
+  if (fd == -1) {
+    return ErrnoError("Failed to create memfd");
+  }
+
+  return fd;
+#else
+#error "The memfd syscall is not available."
+#endif
+}
+
+
+Try<int_fd> cloneSealedFile(const std::string& filePath)
+{
+  if (!os::stat::isfile(filePath)) {
+    return Error("The original file '" + filePath + "' is not a regular file");
+  }
+
+  Try<Bytes> size = os::stat::size(filePath);
+  if (size.isError()) {
+    return Error("Failed to get the size of the source file: " + size.error());
+  }
+
+  Try<int_fd> fileFd = os::open(filePath, O_CLOEXEC | O_RDONLY);
+  if (fileFd.isError()) {
+    return Error("Failed to open source file: " + fileFd.error());
+  }
+
+  Try<int_fd> memFd = create(filePath, MFD_CLOEXEC | MFD_ALLOW_SEALING);
+  if (memFd.isError()) {
+    os::close(fileFd.get());
+    return Error("Failed to open memfd file: " + memFd.error());
+  }
+
+  ssize_t written = sendfile(memFd.get(), fileFd.get(), nullptr, size->bytes());
+  if (written == -1) {
+    ErrnoError error("Failed to copy file");
+    os::close(fileFd.get());
+    os::close(memFd.get());
+    return error;
+  } else if (static_cast<uint64_t>(written) != size->bytes()) {
+    os::close(fileFd.get());
+    os::close(memFd.get());
+    return Error(
+        "Expect to write " + stringify(size->bytes()) + " bytes, "
+        "but only " + stringify(written) + " is written");
+  }
+
+  os::close(fileFd.get());
+
+  int ret = fchmod(memFd.get(), S_IRWXU | S_IRWXG | S_IRWXO);
+  if (ret == -1) {
+    ErrnoError error("Failed to chmod");
+    os::close(memFd.get());
+    return error;
+  }
+
+  // Seal the memfd file.
+  ret = fcntl(
+      memFd.get(),
+      F_ADD_SEALS,
+      F_SEAL_SHRINK | F_SEAL_GROW | F_SEAL_WRITE | F_SEAL_SEAL);
+
+  if (ret == -1) {
+    ErrnoError error("Failed to seal the memfd");
+    os::close(memFd.get());
+    return error;
+  }
+
+  return memFd.get();
+}
+
+} // namespace memfd {
+} // namespace internal {
+} // namespace mesos {
diff --git a/src/linux/memfd.hpp b/src/linux/memfd.hpp
new file mode 100644
index 0000000..4cf9906
--- /dev/null
+++ b/src/linux/memfd.hpp
@@ -0,0 +1,39 @@
+// Licensed to the Apache Software Foundation (ASF) under one
+// or more contributor license agreements.  See the NOTICE file
+// distributed with this work for additional information
+// regarding copyright ownership.  The ASF licenses this file
+// to you under the Apache License, Version 2.0 (the
+// "License"); you may not use this file except in compliance
+// with the License.  You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#ifndef __LINUX_MEMFD_HPP__
+#define __LINUX_MEMFD_HPP__
+
+#include <string>
+
+#include <stout/try.hpp>
+
+#include <stout/os/int_fd.hpp>
+
+namespace mesos {
+namespace internal {
+namespace memfd {
+
+// Clone a file into a sealed private copy such that any attempt to
+// modify it will not modify the original binary. Returns the memfd of
+// the sealed copy.
+Try<int_fd> cloneSealedFile(const std::string& filePath);
+
+} // namespace memfd {
+} // namespace internal {
+} // namespace mesos {
+
+#endif // __LINUX_MEMFD_HPP__
-- 
2.5.1

